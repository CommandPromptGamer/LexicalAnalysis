#include "TokenList.h"

enum tokenHashes_t {
    // Hash-generated tokens
    ALIGNAS_KEYWORD_TOKEN                           = 486, // alignas
    ALIGNOF_KEYWORD_TOKEN                           = 267, // alignof
    AUTO_KEYWORD_TOKEN                              = 517, // auto
    BOOL_KEYWORD_TOKEN                              = 626, // bool
    BREAK_KEYWORD_TOKEN                             = 495, // break
    CASE_KEYWORD_TOKEN                              = 381, // case
    CHAR_KEYWORD_TOKEN                              = 714, // char
    CONST_KEYWORD_TOKEN                             = 743, // const
    CONSTEXPR_KEYWORD_TOKEN                         = 228, // constexpr
    CONTINUE_KEYWORD_TOKEN                          = 619, // continue
    DEFAULT_KEYWORD_TOKEN                           = 401, // default
    DO_KEYWORD_TOKEN                                = 608, // do
    DOUBLE_KEYWORD_TOKEN                            = 532, // double
    ELSE_KEYWORD_TOKEN                              = 322, // else
    ENUM_KEYWORD_TOKEN                              = 195, // enum
    EXTERN_KEYWORD_TOKEN                            = 705, // extern
    FALSE_KEYWORD_TOKEN                             = 147, // false
    FLOAT_KEYWORD_TOKEN                             = 352, // float
    FOR_KEYWORD_TOKEN                               = 612, // for
    GOTO_KEYWORD_TOKEN                              = 390, // goto
    IF_KEYWORD_TOKEN                                = 597, // if
    INLINE_KEYWORD_TOKEN                            = 304, // inline
    INT_KEYWORD_TOKEN                               = 430, // int
    LONG_KEYWORD_TOKEN                              = 422, // long
    NULLPTR_KEYWORD_TOKEN                           = 271, // nullptr
    REGISTER_KEYWORD_TOKEN                          = 647, // register
    RESTRICT_KEYWORD_TOKEN                          = 538, // restrict
    RETURN_KEYWORD_TOKEN                            = 255, // return
    SHORT_KEYWORD_TOKEN                             = 614, // sshort
    SIGNED_KEYWORD_TOKEN                            = 678, // signed
    SIZEOF_KEYWORD_TOKEN                            = 581, // sizeof
    STATIC_KEYWORD_TOKEN                            = 523, // static
    STATIC_UNDERSCORE_ASSERT_KEYWORD_TOKEN          = 551, // static_assert
    STRUCT_KEYWORD_TOKEN                            = 536, // struct
    SWITCH_KEYWORD_TOKEN                            = 698, // switch
    THREAD_UNDERSCORE_LOCAL_KEYWORD_TOKEN           = 328, // thread_local
    TRUE_KEYWORD_TOKEN                              = 670, // true
    TYPEDEF_KEYWORD_TOKEN                           = 409, // typedef
    TYPEOF_KEYWORD_TOKEN                            = 419, // typeof
    TYPEOF_UNDERSCORE_UNQUAL_KEYWORD_TOKEN          = 703, // typeof_unqual
    UNION_KEYWORD_TOKEN                             = 435, // union
    UNSIGNED_KEYWORD_TOKEN                          = 341, // unsigned
    VOID_KEYWORD_TOKEN                              = 726, // void
    VOLATILE_KEYWORD_TOKEN                          = 366, // volatile
    WHILE_KEYWORD_TOKEN                             = 170, // while
    UNDERSCORE_ATOMIC_KEYWORD_TOKEN                 = 339, // _Atomic
    UNDERSCORE_BITINT_KEYWORD_TOKEN                 = 203, // _BitInt
    UNDERSCORE_COMPLEX_KEYWORD_TOKEN                = 439, // _Complex
    UNDERSCORE_DECIMAL128_KEYWORD_TOKEN             = 557, // _Decimal128
    UNDERSCORE_DECIMAL32_KEYWORD_TOKEN              = 260, // _Decimal32
    UNDERSCORE_DECIMAL64_KEYWORD_TOKEN              = 156, // _Decimal64
    UNDERSCORE_GENERIC_KEYWORD_TOKEN                = 617, // _Generic
    UNDERSCORE_IMAGINARY_KEYWORD_TOKEN              = 367, // _Imaginary
    UNDERSCORE_NORETURN_KEYWORD_TOKEN               = 465, // _Noreturn
    OPENING_BRACKET_PUNCTUATOR_TOKEN                = 631, // [
    CLOSING_BRACKET_PUNCTUATOR_TOKEN                = 669, // ]
    OPENING_PARENTHESIS_PUNCTUATOR_TOKEN            = 281, // (
    CLOSING_PARENTHESIS_PUNCTUATOR_TOKEN            = 300, // )
    OPENING_BRACE_PUNCTUATOR_TOKEN                  = 620, // {
    CLOSING_BRACE_PUNCTUATOR_TOKEN                  = 658, // }
    DOT_PUNCTUATOR_TOKEN                            = 395, // .
    ARROW_PUNCTUATOR_TOKEN                          = 139, // ->
    PLUS_PLUS_PUNCTUATOR_TOKEN                      = 326, // ++
    MINUS_MINUS_PUNCTUATOR_TOKEN                    = 364, // --
    AMPERSAND_PUNCTUATOR_TOKEN                      = 243, // &
    ASTERISK_PUNCTUATOR_TOKEN                       = 319, // *
    PLUS_PUNCTUATOR_TOKEN                           = 338, // +
    MINUS_PUNCTUATOR_TOKEN                          = 376, // -
    TILDE_PUNCTUATOR_TOKEN                          = 667, // ~
    EXCLAMATION_MARK_PUNCTUATOR_TOKEN               = 148, // !
    SLASH_PUNCTUATOR_TOKEN                          = 414, // /
    PERCENT_PUNCTUATOR_TOKEN                        = 224, // %
    LESS_LESS_PUNCTUATOR_TOKEN                      = 649, // <<
    GREATER_GREATER_PUNCTUATOR_TOKEN                = 687, // >>
    LESS_PUNCTUATOR_TOKEN                           = 661, // <
    GREATER_PUNCTUATOR_TOKEN                        = 699, // >
    LESS_EQUAL_PUNCTUATOR_TOKEN                     = 745, // <=
    GREATER_EQUAL_PUNCTUATOR_TOKEN                  = 591, // >=
    EQUAL_EQUAL_PUNCTUATOR_TOKEN                    = 668, // ==
    NOT_EQUAL_PUNCTUATOR_TOKEN                      = 348, // !=
    CARET_PUNCTUATOR_TOKEN                          = 688, // ^
    VERTICAL_LINE_PUNCTUATOR_TOKEN                  = 639, // |
    AMPERSAND_AMPERSAND_PUNCTUATOR_TOKEN            = 231, // &&
    VERTICAL_VERTICAL_PUNCTUATOR_TOKEN              = 627, // ||
    QUESTION_MARK_PUNCTUATOR_TOKEN                  = 718, // ?
    COLON_PUNCTUATOR_TOKEN                          = 623, // :
    COLON_COLON_PUNCTUATOR_TOKEN                    = 611, // ::
    SEMICOLON_PUNCTUATOR_TOKEN                      = 642, // ;
    ELLIPSIS_PUNCTUATOR_TOKEN                       = 383, // ; ...
    EQUAL_SIGN_PUNCTUATOR_TOKEN                     = 680, // =
    ASTERISK_EQUAL_PUNCTUATOR_TOKEN                 = 274, // *=
    SLASH_EQUAL_PUNCTUATOR_TOKEN                    = 508, // /=
    PERCENT_EQUAL_PUNCTUATOR_TOKEN                  = 659, // %=
    PLUS_EQUAL_PUNCTUATOR_TOKEN                     = 197, // +=
    MINUS_EQUAL_PUNCTUATOR_TOKEN                    = 662, // -=
    LESS_LESS_EQUAL_PUNCTUATOR_TOKEN                = 286, // <<=
    GREATER_GREATER_EQUAL_PUNCTUATOR_TOKEN          = 431, // >>=
    AMPERSAND_EQUAL_PUNCTUATOR_TOKEN                = 582, // &=
    CARET_EQUAL_PUNCTUATOR_TOKEN                    = 603, // ^=
    VERTICAL_LINE_EQUAL_PUNCTUATOR_TOKEN            = 150, // |=
    COMMA_PUNCTUATOR_TOKEN                          = 357, // ,
    NULL_DIRECTIVE_TOKEN                            = 186, // #
    HASH_HASH_PUNCTUATOR_TOKEN                      = 174, // ##
    // Manual tokens
    CHARACTER_STRING_LITERAL_TOKEN                  = 128, // "string"
    UTF_8_STRING_LITERAL_TOKEN                      = 129, // u8"string"
    WCHAR_UNDERSCORE_T_STRING_LITERAL_TOKEN         = 130, // L"string"
    UTF_16_STRING_LITERAL_TOKEN                     = 131, // u"string"
    UTF_32_STRING_LITERAL_TOKEN                     = 132, // U"string"
    HEADER_NAME_LESS_GREATER_TOKEN                  = 140, // #include <header.h>
    HEADER_NAME_QUOTES_TOKEN                        = 141, // #include "header.h"
    CHARACTER_CONSTANT_TOKEN                        = 151, // 'c'
    UTF_8_CHARACTER_CONSTANT_TOKEN                  = 152, // u8'c'
    WCHAR_UNDERSCORE_T_CHARACTER_CONSTANT_TOKEN     = 153, // L'c'
    UTF_16_CHARACTER_CONSTANT_TOKEN                 = 154, // u'c'
    UTF_32_CHARACTER_CONSTANT_TOKEN                 = 155, // U'c'
    INT_CONSTANT_TOKEN                              = 157, // 123
    UNSIGNED_INT_CONSTANT_TOKEN                     = 158, // 123
    LONG_INT_CONSTANT_TOKEN                         = 159, // 123l
    UNSIGNED_LONG_INT_CONSTANT_TOKEN                = 160, // 123ul
    LONG_LONG_INT_CONSTANT_TOKEN                    = 161, // 123ll
    UNSIGNED_LONG_LONG_INT_CONSTANT_TOKEN           = 162, // 123ull
    FLOAT_CONSTANT_TOKEN                            = 163, // 12.3f
    DOUBLE_CONSTANT_TOKEN                           = 164, // 12.3
    LONG_DOUBLE_CONSTANT_TOKEN                      = 165, // 12.3l
    UNDERSCORE_DECIMAL32_CONSTANT_TOKEN             = 166, // 12.3df
    UNDERSCORE_DECIMAL64_CONSTANT_TOKEN             = 167, // 12.3dd
    UNDERSCORE_DECIMAL128_CONSTANT_TOKEN            = 168, // 12.3dl
    IF_PREPROCESSING_DIRECTIVE_TOKEN                = 204, // #if
    IFDEF_PREPROCESSING_DIRECTIVE_TOKEN             = 205, // #ifdef
    IFNDEF_PREPROCESSING_DIRECTIVE_TOKEN            = 206, // #ifndef
    ELIF_PREPROCESSING_DIRECTIVE_TOKEN              = 207, // #elif
    ELIFDEF_PREPROCESSING_DIRECTIVE_TOKEN           = 208, // #elifdef
    ELIFNDEF_PREPROCESSING_DIRECTIVE_TOKEN          = 209, // #elifndef
    ELSE_PREPROCESSING_DIRECTIVE_TOKEN              = 210, // #else
    ENDIF_PREPROCESSING_DIRECTIVE_TOKEN             = 211, // #endif
    INCLUDE_PREPROCESSING_DIRECTIVE_TOKEN           = 212, // #include
    EMBED_PREPROCESSING_DIRECTIVE_TOKEN             = 213, // #embed
    DEFINE_PREPROCESSING_DIRECTIVE_TOKEN            = 214, // #define
    UNDEF_PREPROCESSING_DIRECTIVE_TOKEN             = 215, // #undef
    LINE_PREPROCESSING_DIRECTIVE_TOKEN              = 216, // #line
    ERROR_PREPROCESSING_DIRECTIVE_TOKEN             = 217, // #error
    WARNING_PREPROCESSING_DIRECTIVE_TOKEN           = 218, // #warning
    PRAGMA_PREPROCESSING_DIRECTIVE_TOKEN            = 219  // #pragma
};